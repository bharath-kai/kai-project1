import tkinter as tk
from tkinter import filedialog, messagebox, scrolledtext
import bcrypt
import yara
import os

# Simple in-memory user store (replace with DB for production)
users = {}

def register_user(username, password):
    if username in users:
        return False, "User already exists."
    hashed = bcrypt.hashpw(password.encode(), bcrypt.gensalt())
    users[username] = hashed
    return True, "Registration successful."

def login_user(username, password):
    if username not in users:
        return False, "User does not exist."
    if bcrypt.checkpw(password.encode(), users[username]):
        return True, "Login successful."
    return False, "Incorrect password."

def analyze_memory_with_yara(memory_path, yara_path, bytes_to_dump):
    try:
        rule = yara.compile(filepath=yara_path)
        with open(memory_path, "rb") as f:
            data = f.read(bytes_to_dump)
        matches = rule.match(data=data)
        return matches
    except Exception as e:
        return f"Error: {e}"

class MalwareAnalyzerGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("Malware Analyzer GUI Tool")

        # Authentication Frame
        auth_frame = tk.LabelFrame(root, text="Authentication")
        auth_frame.pack(fill="x", padx=10, pady=5)

        tk.Label(auth_frame, text="Username:").pack(side="left")
        self.username_entry = tk.Entry(auth_frame, width=15)
        self.username_entry.pack(side="left", padx=3)
        tk.Label(auth_frame, text="Password:").pack(side="left")
        self.password_entry = tk.Entry(auth_frame, width=15, show="*")
        self.password_entry.pack(side="left", padx=3)
        tk.Button(auth_frame, text="Register", command=self.register).pack(side="left", padx=5)
        tk.Button(auth_frame, text="Login", command=self.login).pack(side="left", padx=5)

        # Analysis Frame
        analyze_frame = tk.LabelFrame(root, text="Malware Analysis")
        analyze_frame.pack(fill="x", padx=10, pady=5)

        tk.Label(analyze_frame, text="Memory Dump File:").grid(row=0, column=0, sticky="e")
        self.memory_path = tk.Entry(analyze_frame, width=40)
        self.memory_path.grid(row=0, column=1)
        tk.Button(analyze_frame, text="Browse", command=self.browse_memory).grid(row=0, column=2, padx=2)

        tk.Label(analyze_frame, text="YARA Rule File:").grid(row=1, column=0, sticky="e")
        self.yara_path = tk.Entry(analyze_frame, width=40)
        self.yara_path.grid(row=1, column=1)
        tk.Button(analyze_frame, text="Browse", command=self.browse_yara).grid(row=1, column=2, padx=2)

        tk.Label(analyze_frame, text="Bytes to Dump:").grid(row=2, column=0, sticky="e")
        self.bytes_entry = tk.Entry(analyze_frame, width=10)
        self.bytes_entry.insert(0, "64")
        self.bytes_entry.grid(row=2, column=1, sticky="w")
        tk.Button(analyze_frame, text="Analyze", command=self.analyze).grid(row=3, column=1, pady=5, sticky="w")

        # Results Frame
        results_frame = tk.LabelFrame(root, text="Results")
        results_frame.pack(fill="both", expand=True, padx=10, pady=5)
        self.results_text = scrolledtext.ScrolledText(results_frame, height=10)
        self.results_text.pack(fill="both", expand=True)
        tk.Button(results_frame, text="Save Report", command=self.save_report).pack(pady=3)

        self.logged_in = False

    def register(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if not username or not password:
            messagebox.showwarning("Input Error", "Please provide both username and password.")
            return
        success, msg = register_user(username, password)
        messagebox.showinfo("Registration", msg)

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if not username or not password:
            messagebox.showwarning("Input Error", "Please provide both username and password.")
            return
        success, msg = login_user(username, password)
        if success:
            self.logged_in = True
            messagebox.showinfo("Login", msg)
        else:
            messagebox.showerror("Login Failed", msg)

    def browse_memory(self):
        path = filedialog.askopenfilename(title="Select Memory Dump File")
        if path:
            self.memory_path.delete(0, tk.END)
            self.memory_path.insert(0, path)

    def browse_yara(self):
        path = filedialog.askopenfilename(title="Select YARA Rule File")
        if path:
            self.yara_path.delete(0, tk.END)
            self.yara_path.insert(0, path)

    def analyze(self):
        if not self.logged_in:
            messagebox.showwarning("Auth Required", "Please login before analysis.")
            return
        mem_path = self.memory_path.get()
        yara_path = self.yara_path.get()
        try:
            bytes_to_dump = int(self.bytes_entry.get())
        except ValueError:
            messagebox.showerror("Input Error", "Bytes to dump must be an integer.")
            return
        if not os.path.exists(mem_path) or not os.path.exists(yara_path):
            messagebox.showerror("File Error", "Please select valid files.")
            return
        result = analyze_memory_with_yara(mem_path, yara_path, bytes_to_dump)
        self.results_text.delete("1.0", tk.END)
        self.results_text.insert(tk.END, str(result))

    def save_report(self):
        report = self.results_text.get("1.0", tk.END)
        if not report.strip():
            messagebox.showwarning("No Results", "No analysis results to save.")
            return
        path = filedialog.asksaveasfilename(defaultextension=".txt", title="Save Report")
        if path:
            with open(path, "w") as f:
                f.write(report)
            messagebox.showinfo("Saved", f"Report saved to {path}")

if __name__ == "__main__":
    root = tk.Tk()
    app = MalwareAnalyzerGUI(root)
    root.mainloop()
